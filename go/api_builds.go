/*
 * @File: api_builds.go
 * @Date: 2019-06-07 02:39:07
 * @OA:   antonioe
 * @CA:   Antonio Escalera
 * @Time: 2019-06-07 03:21:30
 * @Mail: antonioe@wolfram.com
 * @Copy: Copyright Â© 2019 Antonio Escalera <aj@angelofdeauth.host>
 */
/*
 * Swagger Simple Json Parser
 *
 * This is a simple test application written to return the latest successfully built AMI.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
)

type Blds struct {
	Jobs struct {
		BuildBaseAMI struct {
			Builds []struct {
				RuntimeSeconds string `json:"runtime_seconds"`
				BuildDate      string `json:"build_date"`
				Result         string `json:"result"`
				Output         string `json:"output"`
			} `json:"Builds"`
		} `json:"Build base AMI"`
	} `json:"jobs"`
}

type Latest struct {
	BuildDate  string `json:"build_date,omitempty"`
	AmiId      string `json:"ami_id,omitempty"`
	CommitHash string `json:"commit_hash,omitempty"`
}

func BuildsParse(w http.ResponseWriter, r *http.Request) {
	body, errr := ioutil.ReadAll(r.Body)
	if errr != nil {

	}
	var b Blds
	erru := json.Unmarshal([]byte(body), &b)
	if erru != nil {

	}
	blds := b.Jobs.BuildBaseAMI.Builds

	var highest int64
	hi := blds[0]
	for _, v := range blds {
		curr, errc := strconv.ParseInt(v.BuildDate, 10, 64)
		if errc != nil {
			continue
		}
		o := strings.Fields(v.Output)
		var aid string
		var cah string
		if len(o) > 0 {
			aid = o[2]
			cah = o[3]
		} else {
			continue
		}
		if curr > highest && v.Result == "SUCCESS" && strings.Contains(aid, "ami-") && len(cah) == 40 {
			highest = curr
			hi = v
		}
	}

	oparr := strings.Fields(hi.Output)

	amiid := oparr[2]
	chash := oparr[3]

	ret := Latest{BuildDate: hi.BuildDate, AmiId: amiid, CommitHash: chash}

	re, errm := json.Marshal(ret)
	if errm != nil {

	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(re)
}
